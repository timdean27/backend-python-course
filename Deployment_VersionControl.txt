## CI/CD Workflow Overview

### Local Development
1. Code locally on the `dev` branch.
2. Commit changes to the `dev` branch.
3. Push the `dev` branch to a centralized server like GitHub.

### Pull Request and Code Review
1. Submit a pull request to merge the `dev` branch into the `main` branch.
2. Review and confirm the pull request.

### Automated Deployment
1. Use AWS CodePipeline to automate the deployment process.
2. Configure the pipeline to trigger deployments when changes are merged into the `main` branch.

### Notes
- Not every commit should be deployed automatically.
- Signal when you want commits to be deployed or use `dev` and `main` branch versions.

### Full Workflow
1. Code locally on `dev`.
2. Commit changes.
3. Push to centralized server.
4. Submit pull request to merge `dev` to `main`.
5. Review and confirm.
6. Changes on server are made automatically.

## Configuring AWS CodePipeline

### Create an AWS CodePipeline
1. Go to the [AWS CodePipeline console](https://aws.amazon.com/codepipeline/).
2. Create a new pipeline.

### Define Source Stage
1. Set up the source stage to monitor your GitHub repository.
2. Configure the pipeline to trigger on changes to the `main` branch.

### Add Build Stage
1. Use AWS CodeBuild to build and test your application.
2. Configure the build stage to run your test suite.

### Add Deploy Stage
1. Use AWS CodeDeploy or other deployment services to deploy your application.
2. Define the deployment configuration and environment.

## Installing Python, pip, and Git

### Check Python and pip versions
1. In Bash:
    bash
    pip --version
    
2. In Command Prompt (CMD):
    cmd
    python --version
    
## Setting Up a Virtual Environment
### Create a virtual environment
1. In Bash:
    bash
    python -m venv venv
    
    or
    bash
    python -m venv .venv  # The dot makes it a hidden folder; can see with command ls -a
    
    **We are naming it .venv; it can be named arbitrarily.**

### Activate the virtual environment
1. On Windows:
    cmd
    venv\Scripts\activate
    
2. On Bash:
    - In the folder outside of `venv`:
    bash
    . venv/Scripts/activate
    
    **You should see (venv)**

### Verify virtual environment
1. Type `pip freeze` to see only packages in that environment, not global packages.

### Deactivate virtual environment
1. Type:
    bash
    deactivate
    

### List dependencies in `requirements.txt`
1. To push the dependencies to the `requirements.txt` file:
    bash
    pip freeze > requirements.txt
    
2. To see what's in the requirements file, use:
    bash
    cat requirements.txt
    
### Install dependencies from `requirements.txt`
1. Use:
    bash
    pip install -r requirements.txt
