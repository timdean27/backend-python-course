source control git pushed from local machine to sentralized locatin liek github
can automaticly deply through process CI/CD continues integration and deployment 

- might not want every commit deyployed 
    - signal when you want comits to be deyloped or use Dev and main branch versions 

code localy on dev > commit changes > push to centralized server > submit pull request to merge dev branch to main > review and confierm > changes on server made automaticly 
### CI/CD Workflow Overview

1. **Local Development**:
    - Code locally on the `dev` branch.
    - Commit changes to the `dev` branch.
    - Push the `dev` branch to a centralized server like GitHub.

2. **Pull Request and Code Review**:
    - Submit a pull request to merge the `dev` branch into the `main` branch.
    - Review and confirm the pull request.

3. **Automated Deployment**:
    - Use AWS CodePipeline to automate the deployment process.
    - Configure the pipeline to trigger deployments when changes are merged into the `main` branch.

can be done with AWS pipeline 
https://aws.amazon.com/codepipeline/
- pipeline when the output of one step goes into the input of the next process
### Configuring AWS CodePipeline

1. **Create an AWS CodePipeline**:
    - Go to the [AWS CodePipeline console](https://aws.amazon.com/codepipeline/).
    - Create a new pipeline.

2. **Define Source Stage**:
    - Set up the source stage to monitor your GitHub repository.
    - Configure the pipeline to trigger on changes to the `main` branch.

3. **Add Build Stage**:
    - Use AWS CodeBuild to build and test your application.
    - Configure the build stage to run your test suite.

4. **Add Deploy Stage**:
    - Use AWS CodeDeploy or other deployment services to deploy your application.
    - Define the deployment configuration and environment.


#### Installing Python, pip, and Git

1. **Check Python and pip versions**:
    - In Bash:
        bash
        pip --version
        Output:
        pip 24.1.2
        
    - In Command Prompt (CMD):
        cmd
        python --version
        Output:  
        Python 3.11.5
        


Virtual env 
- allow you to list dependinces to share and install on individual servers to always have matching enviorments
requirments.txt 

#### Setting Up a Virtual Environment

1. **Create a virtual environment**:
    bash
    python -m venv venv  
    or 
    python -m venv .venv    // the dot makes it a hiden folder can see with comand ls -a 
    ** we are naming it .venv we can name it arbitrarily 
2. **Activate the virtual environment**:
    - On Windows:
        cmd
        venv\Scripts\activate
    -On Bash 
        in folder outside of venv 
         . venv/Scripts/activate
         ** should see (venv)

******* type pip freeze you should only see packages in that enviorment not gloable 
to swtich out of env 
deactivate 
          
3. **List dependencies in `requirements.txt`**:
    bash
    pip freeze > requirements.txt
4. **Install dependencies from `requirements.txt`**:
    bash
    pip install -r requirements.txt
    